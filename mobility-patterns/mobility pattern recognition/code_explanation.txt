# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans


# Insert data
df = pd.read_excel()

# Fill nan with the indication that the ride was conducted
df['cancellation Reason'] = df['cancellation Reason'].fillna('ride_made')

# Transform datetime attributes at the right form
df['departure time'] = pd.to_datetime(df['departure time'], format='%d.%m.%Y %H:%M', errors='coerce')
df['arrival time'] = pd.to_datetime(df['arrival time'], format='%d.%m.%Y %H:%M', errors='coerce')

# Rename columns
df = df.rename(columns={'Requested place of departure (lon)': 'deplon', 'requested place of departure (lat)': 'deplat','requested place of arrival (lon)': 'arrlon', 'requested place of arrival (lat)': 'arrlat'})

# Calculate trip duration
df['time_difference'] = (df['arrival time'] - df['departure time']).dt.total_seconds() / 60

# Extract specific time attributes
df['only_date'] = pd.DatetimeIndex(df['departure time']).date
df['hour'] = pd.DatetimeIndex(df['departure time']).hour
df['weekday'] = pd.DatetimeIndex(df['departure time']).weekday

# Isolate valid trips
df_ride_made = df[df['cancellation Reason'] == 'ride_made']

# Apply Elbow Method to decide optimal clusters
X = df_ride_made[['deplat', 'deplon']]
inertias = []

for i in range(1,11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(X)
    inertias.append(kmeans.inertia_)

plt.plot(range(1,11), inertias, marker='o')
plt.title('Elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()


# Applying K-means clustering
kmeans = KMeans(n_clusters=5, random_state=0)  
kmeans.fit(X)

# Adding the cluster labels to the original dataframe
df_ride_made['cluster'] = kmeans.labels_

# Plotting the clusters
plt.scatter(df_ride_made['deplat'], df_ride_made['deplon'], c=df_ride_made['cluster'], cmap='viridis', marker='o')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')
plt.xlabel('Latitude')
plt.ylabel('Longitude')
plt.title('K-Means Clustering of Latitude and Longitude')
plt.show()
